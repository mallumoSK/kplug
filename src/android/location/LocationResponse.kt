package tk.mallumo.cordova.kplug.location

import android.content.Context
import android.content.Context.BATTERY_SERVICE
import android.location.Location
import android.net.wifi.WifiManager
import android.os.BatteryManager
import java.math.BigDecimal
import java.math.MathContext
import java.math.RoundingMode
import java.text.SimpleDateFormat
import java.util.*

data class LocationResponse(
    var identifier: String = "",
    val state: State,
    val provider: String = "X",
    val accuracy: Float = 0.0f,
    val lat: Double = 0.0,
    val lon: Double = 0.0,
    val altitude: Double = 0.0,
    val dt: Long = System.currentTimeMillis(), //in case state of NEW_LOCATION is datetime generated by location provider
    val bearing: Float = 0.0f,
    val speed: Float = 0.0f,
    val wifi: String = "", // name of currently connected wifi
    val battery: Int = -1, // mobile battery state (0-100)
    val distanceM: Long = 0
) { // distance in meters from last position

    enum class State {
        IDLE, // startup point
        NEW_LOCATION, // new location
        PROVIDER_ENABLED, // user enable location provider (GPS/NETWORK/OTHER)
        PROVIDER_DISABLED // user DISABLE location provider (GPS/NETWORK/OTHER)
    }
}

fun LocationResponse.buildUploadLink(prefix: String) = buildString {
    append(prefix)
    if (provider == "fused") {
        append("F")
    } else {
        append(provider)
    }
    append(",${lat.d6}")
    append(",${lon.d6}")
    append(",${serverStringDT(dt)}")
    append(",$wifi")
    append(",${speed.d6}")
    append(",$distanceM")
    append(",$battery")
}

fun serverStringDT(dt: Long): String =
    SimpleDateFormat("yyyyMMddHHmmss", Locale.getDefault())
        .format(Date(dt))

private val Double.d6: String
    get() = BigDecimal(this)
        .setScale(6, RoundingMode.HALF_DOWN)
        .round(MathContext(6, RoundingMode.HALF_DOWN))
        .toPlainString()

private val Float.d6: String get() = toDouble().d6

fun Location.ofLocationResponse(context: Context, state: LocationResponse.State) = LocationResponse(
    state = state,
    accuracy = accuracy,
    lat = latitude,
    lon = longitude,
    dt = time,
    altitude = altitude,
    bearing = bearing,
    speed = speed,
    provider = provider ?: "X",
    wifi = getAndroidWifiName(context),
    battery = getAndroidBatteryState(context),
    distanceM = getDistanceFromLastPosition(context, this)
)

fun getDistanceFromLastPosition(context: Context, location: Location): Long =
    LocationDatabase.get(context)
        .last()?.let {
            val oldLoc = Location("x").apply {
                latitude = it.lat
                longitude = it.lon
            }
            oldLoc.distanceTo(location).toLong()
        } ?: -1

fun getAndroidBatteryState(context: Context): Int {
    val bm = context.applicationContext.getSystemService(BATTERY_SERVICE) as BatteryManager
    return bm.getIntProperty(BatteryManager.BATTERY_PROPERTY_CAPACITY)
}

fun getAndroidWifiName(context: Context): String {
    val manager = context.applicationContext.getSystemService(Context.WIFI_SERVICE) as WifiManager
    return manager.connectionInfo?.macAddress ?: ""
}
